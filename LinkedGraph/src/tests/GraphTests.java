/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tests;

import ga.GAImplementation;
import java.util.Random;
import linkedgraph.*;

/**
 *
 * @author aromualdo
 */
public class GraphTests {

	/*
	input file 
	Generation : int
	population : int
	tourny select : < 
	crossover : < 1
	mutation : < 1
	chromesome length : int(500)
	
	ouput_prefix :String 
	
	main class
	new GA(System.nanotime(), args[0])
	 */
	public static void main(String... args) {
		System.out.println("Working Directory = "
				+ System.getProperty("user.dir"));
		LinkedGraph g = LinkedGraph.load("./test1.txt");
		System.out.println(g);
		// {{(0,6bc7c054) -> 1,4},{(1,232204a1) -> 0,2,4},{(2,4aa298b7) -> 1,3},{(3,7d4991ad) -> 2,5},{(4,28d93b30) -> 0,1},{(5,1b6d3586) -> 3}}
		System.out.println("New Structure: ");
		System.out.println(g);
		LinkedGraph h = g.deepCopy();
		System.out.println("FL Test 1: Merge(0,4) => 0");
		System.out.println(h.fakeLinks(0, 4));
		h = g.deepCopy();
		System.out.println("FL Test 2: Merge(2,5) => 2");
		System.out.println(h.fakeLinks(2, 5));
		h = g.deepCopy();
		System.out.println("FL Test 3: Merge(3,5) => 1");
		System.out.println(h.fakeLinks(3, 5));
		
		g = LinkedGraph.load("./test2.txt");
		// {{(0,4554617c) -> 1,3,4},{(1,74a14482) -> 0,3},{(2,1540e19d) -> 4},{(3,677327b6) -> 0,1,4},{(4,14ae5a5) -> 0,2,3}}
		System.out.println("New Structure: ");
		System.out.println(g);
		h = g.deepCopy();
		System.out.println("FL Test 4: Merge(1,3) => 1");
		System.out.println(h.fakeLinks(1, 3));
		System.out.println("FL Test 5: Merge(1,4) => 2");
		System.out.println(h.fakeLinks(1, 4));
		System.out.println("FL Test 6: Merge(0,3) => 0");
		System.out.println(h.fakeLinks(0, 3));
		
		g = LinkedGraph.load("./test1.txt");
		// {{(0,6bc7c054) -> 1,4},{(1,232204a1) -> 0,2,4},{(2,4aa298b7) -> 1,3},{(3,7d4991ad) -> 2,5},{(4,28d93b30) -> 0,1},{(5,1b6d3586) -> 3}}
		System.out.println("New Structure: ");
		System.out.println(g);
		h = g.deepCopy();
		System.out.println("BFS(4,2) => [0,1,2]");
		System.out.println(h.bfs(4, 2));
		System.out.println("BFS(4,100) => [0,1,2,3,4,5]");
		System.out.println(h.bfs(4, 100));
		System.out.println("BFS(2,1) => [1,3]");
		System.out.println(h.bfs(2, 1));
		System.out.println("Dist(0,3) => 3");
		System.out.println(h.distance(0, 3));
		
		g = LinkedGraph.load("./test1.txt");
		// {{(0,6bc7c054) -> 1,4},{(1,232204a1) -> 0,2,4},{(2,4aa298b7) -> 1,3},{(3,7d4991ad) -> 2,5},{(4,28d93b30) -> 0,1},{(5,1b6d3586) -> 3}}
		System.out.println("New Structure: ");
		h = g.deepCopy();
		System.out.println(h);
		System.out.println("Merge(0,4):");
		h.merge(0, 4);
		System.out.println(h);
		System.out.println("Merge(1,1):");
		h.merge(1, 1);
		System.out.println(h);
		System.out.println("Merge(1,0):");
		h.merge(1, 0);
		System.out.println(h);
		System.out.println("Merge(4,5):");
		h.merge(4, 5);
		System.out.println(h);
		
		LinkedGraph k1 = LinkedGraph.load("./ecoli.txt");
		LinkedGraph k2 = k1.deepCopy();
		LinkedGraph test = k1.deepCopy();
		Random rand = new Random();
		int number_of_merges = 500;
		System.out.println("Applying " + 500 + " merges to K2");
		for (int i = 0; i < number_of_merges; i++) {
			int rand1 = rand.nextInt(k2.getSize());
			int rand2 = rand.nextInt(k2.getSize());
			//System.out.println("K2 Merge("+rand1+","+rand2+")");
			k2.merge(rand1, rand2);
		}
		System.out.println("K1 size: " + k1.getSize());
		System.out.println("K1 current size: " + k1.getCurrentSize());
		System.out.println("K1: " + k1);
		System.out.println("K2 size: " + k2.getSize());
		System.out.println("K2 current size: " + k2.getCurrentSize());
		System.out.println("K2: " + k2);
		
		String chromesome1 = "[(687,24),(1115,1),(473,1122),(21,3),(545,1098),(1046,223),(249,865),(967,13),(1108,1),(1076,965),(470,1121),(480,414),(808,981),(892,1027),(963,766),(774,3),(171,1),(875,1),(839,15),(118,1122),(431,1076),(692,301),(863,1122),(884,1122),(882,1121),(569,1111),(455,1113),(417,20),(751,8),(290,1083),(943,916),(624,184),(617,346),(668,1112),(475,1121),(848,160),(845,497),(20,4),(806,1118),(967,20),(28,457),(910,1122),(696,1122),(469,1),(728,251),(369,1073),(1072,1121),(1041,650),(24,1122),(857,1122),(769,1097),(614,55),(265,1121),(285,1120),(985,1104),(789,1),(1007,367),(694,16),(384,49),(941,1121),(730,1115),(278,5),(665,882),(863,1),(1063,7),(598,1117),(584,471),(596,4),(967,18),(925,74),(1071,1115),(939,1),(299,28),(177,1),(550,691),(902,1089),(719,22),(1070,1119),(384,51),(136,1081),(1031,4),(1063,5),(488,1113),(486,408),(464,2),(1058,360),(900,430),(691,315),(610,409),(986,1103),(72,461),(773,1),(884,1119),(1014,29),(546,1091),(257,154),(878,7),(739,9),(479,1121),(648,1120),(662,18),(878,1),(952,1122),(778,1121),(859,2),(388,1029),(149,7),(179,1122),(797,2),(778,1122),(627,14),(613,694),(696,207),(264,1092),(675,1095),(881,1118),(1112,437),(378,1120),(388,990),(704,4),(1063,1),(514,4),(664,1092),(703,5),(1120,1),(859,1),(881,1120),(136,1078),(880,1120),(256,150),(1072,1120),(632,1102),(17,488),(22,1),(171,1122),(670,1087),(173,1121),(714,4),(675,1087),(798,1118),(669,1118),(20,1122),(595,1122),(464,1),(1071,1119),(279,3),(684,420),(651,20),(429,924),(882,1122),(1064,1),(426,999),(112,438),(951,1122),(257,747),(175,2),(469,2),(1121,1121),(1105,1067),(690,1110),(468,1122),(1058,439),(474,1121),(766,209),(878,1119),(1071,1114),(886,1119),(623,26),(686,714),(836,54),(176,2),(884,1112),(80,1122),(639,6),(969,308),(420,1119),(1042,1119),(206,1121),(178,1119),(838,1108),(865,1121),(778,1120),(685,1108),(895,93),(355,463),(968,17),(719,28),(742,1121),(519,27),(921,1114),(720,24),(906,968),(858,3),(650,1105),(994,384),(675,1092),(604,63),(669,1121),(620,68),(773,1122),(670,1098),(662,1083),(1114,22),(106,30),(8,1091),(885,2),(678,1117),(778,1116),(984,1112),(203,114),(668,1099),(655,14),(481,159),(965,23),(563,1084),(1042,778),(304,7),(387,987),(1118,1122),(571,3),(1104,660),(549,1099),(764,1122),(1107,1)]";
		String chromesome2 = "[(464,1),(469,1),(465,1),(1116,1122),(173,1122),(856,1),(13,190),(480,5),(619,373),(482,1),(649,272),(594,1),(976,971),(119,1117),(863,1122),(1031,18),(884,1117),(1056,1122),(861,1121),(877,1121),(837,493),(945,822),(743,1120),(995,822),(185,70),(1072,1116),(732,1104),(730,1110),(604,60),(1023,1104),(696,1028),(712,371),(1041,4),(989,1116),(20,1),(467,2),(406,941),(1119,1),(1009,725),(791,720),(307,830),(986,1110),(467,4),(670,1117),(471,1120),(884,3),(481,1121),(178,1121),(863,2),(382,778),(481,1083),(880,1121),(1018,953),(641,261),(894,1063),(747,1111),(829,650),(1034,772),(844,193),(604,64),(728,2),(96,1122),(932,1116),(346,1025),(1065,1122),(999,1120),(549,1114),(1022,1104),(865,1122),(1005,1121),(860,1121),(739,1099),(1072,1122),(247,28),(650,26),(742,1093),(429,1119),(616,55),(714,17),(881,1121),(939,2),(568,1113),(478,9),(514,17),(176,3),(253,573),(776,2),(835,1121),(910,1122),(879,1120),(177,1),(979,624),(1070,1118),(194,54),(24,1121),(480,504),(975,897),(1067,2),(1112,708),(667,1107),(733,1115),(179,1119),(877,6),(482,5),(1109,1122),(51,48),(926,7),(420,1032),(966,24),(897,1119),(900,139),(1092,10),(477,8),(1017,834),(627,342),(22,1),(808,919),(806,519),(487,502),(882,5),(878,1121),(964,1051),(883,3),(410,43),(547,1120),(732,16),(568,1116),(1080,785),(21,1),(1020,849),(1119,2),(19,4),(889,75),(775,2),(1033,12),(677,1050),(714,11),(685,212),(30,66),(484,484),(350,9),(1067,5),(174,3),(1056,18),(1092,1),(1038,690),(776,1),(1108,1122),(773,1),(115,4),(710,1118),(646,260),(204,107),(571,3),(198,171),(432,408),(160,133),(777,1120),(717,295),(1074,1108),(136,861),(893,864),(171,2),(262,1117),(741,1101),(735,1101),(1005,413),(293,991),(941,1122),(976,1110),(1070,1121),(858,3),(306,1016),(1006,412),(542,653),(478,508),(1067,1122),(277,411),(771,7),(523,3),(617,59),(825,545),(887,1119),(614,1114),(1012,1119),(404,301),(487,491),(663,647),(1068,1118),(529,40),(744,912),(681,1096),(1065,1120),(624,32),(753,1121),(838,1081),(662,18),(640,40),(1035,727),(484,1119),(980,10),(743,1095),(386,935),(39,1120),(718,29),(478,506),(1081,651),(803,182),(366,1052),(475,1121),(790,187),(189,441),(113,1),(954,580),(658,3),(1040,697),(1040,6),(661,1066),(446,1122),(617,23),(357,649),(249,84),(679,59),(662,1069),(475,1122),(546,1120),(828,1),(473,1122),(653,17),(162,131),(1118,1122),(974,626),(288,1101),(374,50),(829,648),(525,2),(486,1077),(602,206),(199,100),(952,1121),(774,1121),(26,1),(233,1040),(740,1105),(620,45),(737,68),(164,112),(831,11),(675,1121),(840,719),(504,1),(950,1),(230,1),(1013,8),(488,1118),(192,1),(936,112),(12,1119),(341,1121),(600,986),(720,6),(881,1116),(610,292),(623,1116),(885,1113),(718,87),(1012,823),(963,7),(387,1030),(676,11),(618,60),(373,1001),(172,1121),(887,1109),(652,8),(9,4),(684,1084),(52,2),(324,1104),(648,1115)]";
		String chromesome3 = "[(171,2),(1021,1117),(682,1100),(887,1115),(604,14),(773,2),(740,1114),(477,1),(118,1113),(610,34),(1067,1),(661,1105),(748,1120),(23,1121),(989,616),(1120,1122),(55,1121),(286,1116),(782,1122),(176,1122),(1117,1),(1088,689),(324,1),(363,1089),(884,1114),(829,501),(473,2),(863,1),(508,1036),(619,31),(350,1048),(619,284),(656,1071),(510,1122),(676,1082),(470,1),(670,1105),(939,1),(1108,1122),(194,1122),(778,1117),(860,1121),(649,3),(900,1025),(545,1098),(482,491),(608,31),(911,814),(1109,1121),(312,5),(951,1122),(757,4),(978,300),(996,117),(631,2),(607,434),(547,1107),(468,3),(220,522),(592,2),(1045,1111),(253,121),(692,3),(803,3),(257,405),(43,282),(969,28),(716,339),(887,1117),(1003,11),(1115,1),(341,973),(1088,723),(851,1112),(1040,1122),(481,1120),(479,492),(1047,1108),(796,104),(369,617),(653,1074),(630,9),(1022,1122),(728,4),(791,207),(1068,1120),(609,698),(477,493),(720,19),(478,498),(582,1121),(357,1116),(265,23),(167,1116),(543,1098),(774,1),(877,4),(858,1),(410,607),(176,2),(544,2),(466,1121),(1036,3),(981,1035),(856,1),(432,3),(1013,476),(452,295),(40,268),(886,1114),(1072,1114),(1032,702),(170,3),(301,10),(456,3),(772,5),(226,1112),(701,1120),(9,944),(516,15),(1064,2),(993,1117),(553,278),(1,867),(821,989),(482,489),(293,349),(23,1122),(909,1),(404,205),(1064,5),(575,1118),(1020,944),(749,1094),(255,1103),(620,55),(474,1121),(1082,955),(477,2),(894,13),(999,802),(466,1122),(718,18),(1039,1051),(881,4),(880,1),(17,884),(49,560),(644,1112),(525,1),(862,3),(266,23),(480,8),(658,1075),(883,1120),(865,1121),(467,2),(975,2),(540,1121),(1008,1122),(931,1),(1064,3),(429,1081),(880,1121),(179,1119),(295,347),(199,832),(486,1120),(72,21),(1032,739),(553,1120),(1040,1071),(886,1113),(819,219),(968,1118),(173,1122),(641,17),(772,4),(1009,963),(375,1094),(1070,1122),(484,3),(683,216),(275,86),(908,1113),(773,1122),(276,1030),(174,4),(944,719),(468,1),(951,1),(179,1121),(706,1102),(1103,829),(667,11),(386,23),(748,1122),(1048,1110),(730,800),(878,1120),(169,80),(1021,1110),(610,63),(718,28),(485,485),(1112,1007),(273,358),(604,71),(682,406),(24,1119),(776,1118),(896,846),(983,1),(941,1121),(41,267),(402,584),(1072,1120),(515,1122),(831,846),(1101,1121),(614,52),(376,870),(488,1078),(1062,9),(146,5),(748,833),(972,798),(27,1),(375,1085),(21,1121),(1065,1120),(429,945),(1010,1117),(982,1121),(696,1099),(255,61),(30,3),(19,5),(370,2),(613,8),(805,1064),(529,22),(666,1072),(326,836),(687,345),(886,1111),(737,1098),(1074,1102),(725,2),(662,826),(606,28),(132,1066),(474,1),(858,3),(615,175),(885,1111),(1119,2),(1044,1116),(418,1121),(68,1122),(972,791),(453,1115),(833,1089),(1032,528),(616,59),(881,1),(550,1095),(899,845),(982,296),(487,489),(1014,1116),(1031,343),(671,1066),(149,8),(389,2),(488,1077),(546,3),(679,17),(483,487),(361,54)]";
		GAImplementation.ViewChromesome(test, chromesome3);
	}
}
